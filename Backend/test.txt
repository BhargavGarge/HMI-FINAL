View.py
# from flask import Blueprint, request, jsonify
# from Backend.src.core.scripts.chatWithPDF import get_source_id, get_chatwithpdf  # Uncomment this when needed

# core_bp = Blueprint("core/routes", __name__)

# @core_bp.route("/search_response", methods=['POST'])
# def search_function():
#     data = request.get_json()
    
#     if not data:
#         return jsonify({"error": "Missing JSON body"}), 400

#     domain_type = data.get("domain_type")
#     query = data.get("query")

#     if not domain_type or not query:
#         return jsonify({"error": "Missing domain_type or query"}), 400

#     domain_map = {
#         "gender equality": "Backend/data/gender_equality.pdf",
#         "labour": "Backend/data/labour.pdf",
#         "marcoeconomy": "Backend/data/marcoeconomy.pdf",
#         "health": "Backend/data/health.pdf",
#         "finance": "Backend/data/finance.pdf",
#         "subjective wellbeing": "Backend/data/subjective_wellbeing.pdf",
#         "emission trading": "Backend/data/emission_trading.pdf",
#         "transport": "Backend/data/transport.pdf",
#         "refugees & migration": "Backend/data/refugees_migration.pdf",
#     }

#     if domain_type not in domain_map:
#         return jsonify({"error": "Invalid domain"}), 400

#     try:
#         source_id = get_source_id(domain_map[domain_type])
#         answer = get_chatwithpdf(source_id, query)
#         return jsonify({"response": answer})
#     except Exception as e:
#         return jsonify({"error": str(e)}), 500




//recent reports code
  {/* Recent Reports */}
      <section className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold tracking-tight">Recent Reports</h2>
          <Button variant="outline" asChild>
            <Link href="/audio-reports">View All Reports</Link>
          </Button>
        </div>

        <Tabs defaultValue="audio" className="w-full">
          <TabsList className="mb-4">
            <TabsTrigger value="audio">Audio Reports</TabsTrigger>
            <TabsTrigger value="data">Data Reports</TabsTrigger>
          </TabsList>

          <TabsContent value="audio" className="space-y-4">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Germany's Economic Outlook – Q1 2024</CardTitle>
                <CardDescription>
                  2 min • Published March 15, 2024
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Overview of Germany's economic performance in the first
                  quarter with projections for the rest of the year.
                </p>
                <div className="flex space-x-2">
                  <Button size="sm">
                    <span className="mr-1">▶</span> Play
                  </Button>
                  <Button size="sm" variant="outline">
                    Download
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Regional Economic Disparities in Germany</CardTitle>
                <CardDescription>
                  3 min • Published February 28, 2024
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Analysis of economic performance across different German
                  regions and states.
                </p>
                <div className="flex space-x-2">
                  <Button size="sm">
                    <span className="mr-1">▶</span> Play
                  </Button>
                  <Button size="sm" variant="outline">
                    Download
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="data" className="space-y-4">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Quarterly Economic Indicators</CardTitle>
                <CardDescription>Updated March 10, 2024</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Comprehensive dataset of key economic indicators for Q1 2024.
                </p>
                <Button size="sm" variant="outline">
                  Download CSV
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Labor Market Analysis</CardTitle>
                <CardDescription>Updated February 20, 2024</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Detailed breakdown of employment statistics across sectors.
                </p>
                <Button size="sm" variant="outline">
                  Download CSV
                </Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </section>


      //code for region and year put below  <div className="grid gap-4 md:grid-cols-3">
         {/* <Select defaultValue="germany">
            <SelectTrigger>
              <SelectValue placeholder="Select Region" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="germany">Germany</SelectItem>
              <SelectItem value="berlin">Berlin</SelectItem>
              <SelectItem value="bavaria">Bavaria</SelectItem>
              <SelectItem value="north-rhine-westphalia">
                North Rhine-Westphalia
              </SelectItem>
            </SelectContent>
          </Select> */}

          {/* <Select defaultValue="2023-q4">
            <SelectTrigger>
              <SelectValue placeholder="Select Time Range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="2023-q4">Q4 2023</SelectItem>
              <SelectItem value="2023-q3">Q3 2023</SelectItem>
              <SelectItem value="2023-q2">Q2 2023</SelectItem>
              <SelectItem value="2023-q1">Q1 2023</SelectItem>
              <SelectItem value="2023">Year 2023</SelectItem>
            </SelectContent>
          </Select> */}




          //whole code before manipulation search query
          "use client";
import { ArrowDown, ArrowUp, TrendingUp } from "lucide-react";

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import load from "../styles/load.gif";
import { TrendCard } from "@/components/trend-card";
import { ChatBox } from "@/components/chat-box";
import { useState } from "react";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [trendData, setTrendData] = useState<string | null>(null);
  const [indicator, setIndicator] = useState("all");

  const handleIndicatorChange = async (value: string) => {
    setIndicator(value);
    setLoading(true); // start loading

    try {
      // Send selected indicator to backend /indicator route
      const indicatorRes = await fetch("http://127.0.0.1:5000/indicator", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ indicator: value }),
      });

      const indicatorData = await indicatorRes.json();

      if (indicatorData.error) {
        console.error("Backend error:", indicatorData.error);
        return;
      }

      const pdfName = indicatorData.pdf;
      console.log(`Selected PDF: ${pdfName}`);

      // Now send a query to /search_response to get PDF content summary or text
      const searchRes = await fetch("http://127.0.0.1:5000/search_response", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          domain_type: value, // your backend maps domain_type to PDF path
          query: "Give me a summary of this PDF", // default query or customize it
        }),
      });

      const searchData = await searchRes.json();

      if (searchData.error) {
        console.error("Search error:", searchData.error);
        setLoading(false);
        return;
      }

      console.log("searchData:", searchData);
      setTrendData(searchData.response);
    } catch (error) {
      console.error("Fetch failed:", error);
    } finally {
      setLoading(false); // stop loading
    }
  };

  return (
    <div className="container mx-auto px-4 py-6">
      {/* Hero Section */}
      <section className="mb-8 space-y-4">
        <div className="flex flex-col space-y-2">
          <h1 className="text-3xl font-bold tracking-tight">
            Latest trends in German Economy
          </h1>
          <p className="text-muted-foreground">
            Explore key economic indicators and trends across Germany and its
            regions.
          </p>
        </div>

        <div className="grid gap-4 md:grid-cols-3">
          <Select
            defaultValue={indicator}
            onValueChange={handleIndicatorChange}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select Indicator" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Indicators</SelectItem>
              <SelectItem value="gender equality">Gender Equality</SelectItem>
              <SelectItem value="labour">Labour</SelectItem>
              <SelectItem value="marcoeconomy">MacroEconomy</SelectItem>
              <SelectItem value="health">Health</SelectItem>
              <SelectItem value="finance">Finance</SelectItem>
              <SelectItem value="subjective wellbeing">
                Subjective WellBeing
              </SelectItem>
              <SelectItem value="emission trading">Emission Trading</SelectItem>
              <SelectItem value="transport">Transport</SelectItem>
              <SelectItem value="refugees & migration">
                Refugees And Migration
              </SelectItem>
            </SelectContent>
          </Select>
        </div>
      </section>

      {/* Featured Cards */}
      <section className="mb-8">
        <h2 className="mb-4 text-2xl font-bold tracking-tight">
          {indicator === "all" ? "Featured Trends" : "Quick Insight"}
        </h2>

        {loading ? (
          <div className=" p-4 rounded-xl shadow text-center text-sm text-muted-foreground">
            <div className="flex items-center justify-center">
              <img src={load.src} alt="Loading..." className="w-21 h-21  " />
            </div>
          </div>
        ) : trendData && indicator !== "all" ? (
          <div className="bg-muted p-4 rounded-xl shadow">
            <p className="text-sm text-muted-foreground whitespace-pre-wrap">
              {trendData}
            </p>
          </div>
        ) : (
          <div className="grid gap-4 md:grid-cols-3">
            <TrendCard
              title="Current Inflation"
              value="4.2%"
              trend="up"
              icon={<ArrowUp className="h-4 w-4 text-red-500" />}
              description="Increased by 0.3% from previous quarter"
            />

            <TrendCard
              title="Unemployment Rate"
              value="6.1%"
              trend="down"
              icon={<ArrowDown className="h-4 w-4 text-green-500" />}
              description="Decreased by 0.2% from previous quarter"
            />

            <TrendCard
              title="GDP Growth"
              value="+0.9%"
              trend="up"
              icon={<TrendingUp className="h-4 w-4 text-green-500" />}
              description="Increased by 0.4% from previous quarter"
            />
          </div>
        )}
      </section>

      {/* Chat Box (replacing Quick Insights) */}
      <section className="mb-8">
        <h2 className="mb-4 text-2xl font-bold tracking-tight">
          Ask About the Data
        </h2>
        <ChatBox />
      </section>
    </div>
  );
}


//qury route@core_bp.route("/query",  methods=['POST', 'OPTIONS'])
def query():
    if request.method == 'OPTIONS':
        return '', 200

    data = request.get_json()

    if not data:
        return jsonify({"error": "Missing JSON body"}), 400

    domain_type = data.get("domain_type", "").strip().lower()
    query = data.get("query")
    print(f"Received domain_type: {domain_type}")

    domain_map = {
        "gender equality": "data/gender_equality.pdf",
        "labour": "data/labour.pdf",
        "marcoeconomy": "data/marcoeconomy.pdf",
        "health": "data/health.pdf",
        "finance": "data/finance.pdf",
        "subjective wellbeing": "data/subjective_wellbeing.pdf",
        "emission trading": "data/emission_trading.pdf",
        "transport": "data/transport.pdf",
        "refugees & migration": "data/refugees_migration.pdf",
    }

    if domain_type not in domain_map:
        print(f"Invalid domain_type: {domain_type}")
        return jsonify({"error": "Invalid domain"}), 400

    try:
        source_id = get_source_id(domain_map[domain_type])
        answer = get_chatwithpdf(source_id, query)
        return jsonify({"response": answer})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
        # @core_bp.route("/query", methods=['POST', 'OPTIONS'])
# def query():
#     if request.method == 'OPTIONS':
#         return '', 200

#     return jsonify({"response": "Hello, World!"})



//chat box code with repsonse 
"use client";

import type React from "react";
import { useState, useRef, useEffect } from "react";
import { Send, Bot, User, Sparkles } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";

interface Message {
  id: string;
  content: string;
  role: "user" | "assistant";
  timestamp: Date;
}

type ChatBoxProps = {
  indicator: string;
};

export function ChatBox({ indicator }: ChatBoxProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      content:
        "Hello! I'm your economic data assistant. Ask me anything about German economic indicators.",
      role: "assistant",
      timestamp: new Date(),
    },
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Map indicator to sourceId
  const sourceIds: Record<string, string> = {
    "gender equality": "src_xu8lVC3Qox6kchRnG1cq6",
    labour: "src_gQvco3ftB6bUJ9gQ8u66Y",
    macroeconomy: "src_YCJY5mElz4tfQiwklzt9g",
    health: "src_6KqG7PmDuA8DNejTYQyJa",
    finance: "src_4rs5HOMGVDOErQe10Kafd",
    "subjective wellbeing": "src_y1X9pr5NL2Aer3UI1ydzj",
    "emission trading": "src_ZILm5QI9VzVQUgMRSpE2w",
    transport: "src_617Hb0pwT8lZQiNi0SaCf",
    "refugees & migration": "src_WR0PhkuLfSAcRq6mjQO3k",
  };

  // Get the sourceId for the selected indicator, fallback to macroeconomy if unknown
  const sourceId =
    sourceIds[indicator.toLowerCase()] || sourceIds["macroeconomy"];

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      role: "user",
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    try {
      const response = await fetch("http://localhost:5000/query", {
        method: "POST",

        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          domain_type: indicator.toLowerCase(),
          query: input,
        }),
      });

      const data = await response.json();
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: data.response || "Sorry, I couldn't understand that.",
        role: "assistant",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, assistantMessage]);
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 2).toString(),
        content: "❌ Failed to fetch data. Please try again later.",
        role: "assistant",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="border shadow-sm">
      <CardContent className="p-0">
        <div className="flex flex-col h-[400px]">
          <div
            ref={scrollAreaRef}
            className="flex-1 p-4 overflow-y-auto"
            style={{ height: "320px" }}
          >
            <div className="space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${
                    message.role === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`flex items-start space-x-2 max-w-[80%] ${
                      message.role === "user"
                        ? "flex-row-reverse space-x-reverse"
                        : ""
                    }`}
                  >
                    <div
                      className={`flex-shrink-0 rounded-full p-2 ${
                        message.role === "user" ? "bg-primary" : "bg-muted"
                      }`}
                    >
                      {message.role === "user" ? (
                        <User className="h-4 w-4 text-primary-foreground" />
                      ) : (
                        <Bot className="h-4 w-4 text-muted-foreground" />
                      )}
                    </div>
                    <div
                      className={`rounded-lg px-3 py-2 ${
                        message.role === "user"
                          ? "bg-primary text-primary-foreground"
                          : "bg-muted text-foreground"
                      }`}
                    >
                      <p className="text-sm">{message.content}</p>
                      <p className="text-xs opacity-70 mt-1">
                        {message.timestamp.toLocaleTimeString([], {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="flex items-start space-x-2 max-w-[80%]">
                    <div className="flex-shrink-0 rounded-full p-2 bg-muted">
                      <Bot className="h-4 w-4 text-muted-foreground" />
                    </div>
                    <div className="rounded-lg px-3 py-2 bg-muted text-foreground">
                      <div className="flex items-center space-x-2">
                        <div className="h-2 w-2 rounded-full bg-foreground/30 animate-pulse"></div>
                        <div className="h-2 w-2 rounded-full bg-foreground/30 animate-pulse delay-150"></div>
                        <div className="h-2 w-2 rounded-full bg-foreground/30 animate-pulse delay-300"></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          <div className="border-t p-4 bg-background">
            <form onSubmit={handleSubmit} className="flex space-x-2">
              <div className="relative flex-1">
                <Input
                  ref={inputRef}
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder={`Ask about ${indicator} data...`}
                  className="pr-10"
                  disabled={isLoading}
                />
                <Sparkles className="absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              </div>
              <Button
                type="submit"
                size="icon"
                disabled={isLoading || !input.trim()}
              >
                <Send className="h-4 w-4" />
                <span className="sr-only">Send message</span>
              </Button>
            </form>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
