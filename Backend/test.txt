View.py
# from flask import Blueprint, request, jsonify
# from Backend.src.core.scripts.chatWithPDF import get_source_id, get_chatwithpdf  # Uncomment this when needed

# core_bp = Blueprint("core/routes", __name__)

# @core_bp.route("/search_response", methods=['POST'])
# def search_function():
#     data = request.get_json()
    
#     if not data:
#         return jsonify({"error": "Missing JSON body"}), 400

#     domain_type = data.get("domain_type")
#     query = data.get("query")

#     if not domain_type or not query:
#         return jsonify({"error": "Missing domain_type or query"}), 400

#     domain_map = {
#         "gender equality": "Backend/data/gender_equality.pdf",
#         "labour": "Backend/data/labour.pdf",
#         "marcoeconomy": "Backend/data/marcoeconomy.pdf",
#         "health": "Backend/data/health.pdf",
#         "finance": "Backend/data/finance.pdf",
#         "subjective wellbeing": "Backend/data/subjective_wellbeing.pdf",
#         "emission trading": "Backend/data/emission_trading.pdf",
#         "transport": "Backend/data/transport.pdf",
#         "refugees & migration": "Backend/data/refugees_migration.pdf",
#     }

#     if domain_type not in domain_map:
#         return jsonify({"error": "Invalid domain"}), 400

#     try:
#         source_id = get_source_id(domain_map[domain_type])
#         answer = get_chatwithpdf(source_id, query)
#         return jsonify({"response": answer})
#     except Exception as e:
#         return jsonify({"error": str(e)}), 500




//recent reports code
  {/* Recent Reports */}
      <section className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold tracking-tight">Recent Reports</h2>
          <Button variant="outline" asChild>
            <Link href="/audio-reports">View All Reports</Link>
          </Button>
        </div>

        <Tabs defaultValue="audio" className="w-full">
          <TabsList className="mb-4">
            <TabsTrigger value="audio">Audio Reports</TabsTrigger>
            <TabsTrigger value="data">Data Reports</TabsTrigger>
          </TabsList>

          <TabsContent value="audio" className="space-y-4">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Germany's Economic Outlook – Q1 2024</CardTitle>
                <CardDescription>
                  2 min • Published March 15, 2024
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Overview of Germany's economic performance in the first
                  quarter with projections for the rest of the year.
                </p>
                <div className="flex space-x-2">
                  <Button size="sm">
                    <span className="mr-1">▶</span> Play
                  </Button>
                  <Button size="sm" variant="outline">
                    Download
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Regional Economic Disparities in Germany</CardTitle>
                <CardDescription>
                  3 min • Published February 28, 2024
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Analysis of economic performance across different German
                  regions and states.
                </p>
                <div className="flex space-x-2">
                  <Button size="sm">
                    <span className="mr-1">▶</span> Play
                  </Button>
                  <Button size="sm" variant="outline">
                    Download
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="data" className="space-y-4">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Quarterly Economic Indicators</CardTitle>
                <CardDescription>Updated March 10, 2024</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Comprehensive dataset of key economic indicators for Q1 2024.
                </p>
                <Button size="sm" variant="outline">
                  Download CSV
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Labor Market Analysis</CardTitle>
                <CardDescription>Updated February 20, 2024</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Detailed breakdown of employment statistics across sectors.
                </p>
                <Button size="sm" variant="outline">
                  Download CSV
                </Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </section>


      //code for region and year put below  <div className="grid gap-4 md:grid-cols-3">
         {/* <Select defaultValue="germany">
            <SelectTrigger>
              <SelectValue placeholder="Select Region" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="germany">Germany</SelectItem>
              <SelectItem value="berlin">Berlin</SelectItem>
              <SelectItem value="bavaria">Bavaria</SelectItem>
              <SelectItem value="north-rhine-westphalia">
                North Rhine-Westphalia
              </SelectItem>
            </SelectContent>
          </Select> */}

          {/* <Select defaultValue="2023-q4">
            <SelectTrigger>
              <SelectValue placeholder="Select Time Range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="2023-q4">Q4 2023</SelectItem>
              <SelectItem value="2023-q3">Q3 2023</SelectItem>
              <SelectItem value="2023-q2">Q2 2023</SelectItem>
              <SelectItem value="2023-q1">Q1 2023</SelectItem>
              <SelectItem value="2023">Year 2023</SelectItem>
            </SelectContent>
          </Select> */}




          //whole code before manipulation search query
          "use client";
import { ArrowDown, ArrowUp, TrendingUp } from "lucide-react";

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import load from "../styles/load.gif";
import { TrendCard } from "@/components/trend-card";
import { ChatBox } from "@/components/chat-box";
import { useState } from "react";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [trendData, setTrendData] = useState<string | null>(null);
  const [indicator, setIndicator] = useState("all");

  const handleIndicatorChange = async (value: string) => {
    setIndicator(value);
    setLoading(true); // start loading

    try {
      // Send selected indicator to backend /indicator route
      const indicatorRes = await fetch("http://127.0.0.1:5000/indicator", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ indicator: value }),
      });

      const indicatorData = await indicatorRes.json();

      if (indicatorData.error) {
        console.error("Backend error:", indicatorData.error);
        return;
      }

      const pdfName = indicatorData.pdf;
      console.log(`Selected PDF: ${pdfName}`);

      // Now send a query to /search_response to get PDF content summary or text
      const searchRes = await fetch("http://127.0.0.1:5000/search_response", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          domain_type: value, // your backend maps domain_type to PDF path
          query: "Give me a summary of this PDF", // default query or customize it
        }),
      });

      const searchData = await searchRes.json();

      if (searchData.error) {
        console.error("Search error:", searchData.error);
        setLoading(false);
        return;
      }

      console.log("searchData:", searchData);
      setTrendData(searchData.response);
    } catch (error) {
      console.error("Fetch failed:", error);
    } finally {
      setLoading(false); // stop loading
    }
  };

  return (
    <div className="container mx-auto px-4 py-6">
      {/* Hero Section */}
      <section className="mb-8 space-y-4">
        <div className="flex flex-col space-y-2">
          <h1 className="text-3xl font-bold tracking-tight">
            Latest trends in German Economy
          </h1>
          <p className="text-muted-foreground">
            Explore key economic indicators and trends across Germany and its
            regions.
          </p>
        </div>

        <div className="grid gap-4 md:grid-cols-3">
          <Select
            defaultValue={indicator}
            onValueChange={handleIndicatorChange}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select Indicator" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Indicators</SelectItem>
              <SelectItem value="gender equality">Gender Equality</SelectItem>
              <SelectItem value="labour">Labour</SelectItem>
              <SelectItem value="marcoeconomy">MacroEconomy</SelectItem>
              <SelectItem value="health">Health</SelectItem>
              <SelectItem value="finance">Finance</SelectItem>
              <SelectItem value="subjective wellbeing">
                Subjective WellBeing
              </SelectItem>
              <SelectItem value="emission trading">Emission Trading</SelectItem>
              <SelectItem value="transport">Transport</SelectItem>
              <SelectItem value="refugees & migration">
                Refugees And Migration
              </SelectItem>
            </SelectContent>
          </Select>
        </div>
      </section>

      {/* Featured Cards */}
      <section className="mb-8">
        <h2 className="mb-4 text-2xl font-bold tracking-tight">
          {indicator === "all" ? "Featured Trends" : "Quick Insight"}
        </h2>

        {loading ? (
          <div className=" p-4 rounded-xl shadow text-center text-sm text-muted-foreground">
            <div className="flex items-center justify-center">
              <img src={load.src} alt="Loading..." className="w-21 h-21  " />
            </div>
          </div>
        ) : trendData && indicator !== "all" ? (
          <div className="bg-muted p-4 rounded-xl shadow">
            <p className="text-sm text-muted-foreground whitespace-pre-wrap">
              {trendData}
            </p>
          </div>
        ) : (
          <div className="grid gap-4 md:grid-cols-3">
            <TrendCard
              title="Current Inflation"
              value="4.2%"
              trend="up"
              icon={<ArrowUp className="h-4 w-4 text-red-500" />}
              description="Increased by 0.3% from previous quarter"
            />

            <TrendCard
              title="Unemployment Rate"
              value="6.1%"
              trend="down"
              icon={<ArrowDown className="h-4 w-4 text-green-500" />}
              description="Decreased by 0.2% from previous quarter"
            />

            <TrendCard
              title="GDP Growth"
              value="+0.9%"
              trend="up"
              icon={<TrendingUp className="h-4 w-4 text-green-500" />}
              description="Increased by 0.4% from previous quarter"
            />
          </div>
        )}
      </section>

      {/* Chat Box (replacing Quick Insights) */}
      <section className="mb-8">
        <h2 className="mb-4 text-2xl font-bold tracking-tight">
          Ask About the Data
        </h2>
        <ChatBox />
      </section>
    </div>
  );
}


//qury route@core_bp.route("/query",  methods=['POST', 'OPTIONS'])
def query():
    if request.method == 'OPTIONS':
        return '', 200

    data = request.get_json()

    if not data:
        return jsonify({"error": "Missing JSON body"}), 400

    domain_type = data.get("domain_type", "").strip().lower()
    query = data.get("query")
    print(f"Received domain_type: {domain_type}")

    domain_map = {
        "gender equality": "data/gender_equality.pdf",
        "labour": "data/labour.pdf",
        "marcoeconomy": "data/marcoeconomy.pdf",
        "health": "data/health.pdf",
        "finance": "data/finance.pdf",
        "subjective wellbeing": "data/subjective_wellbeing.pdf",
        "emission trading": "data/emission_trading.pdf",
        "transport": "data/transport.pdf",
        "refugees & migration": "data/refugees_migration.pdf",
    }

    if domain_type not in domain_map:
        print(f"Invalid domain_type: {domain_type}")
        return jsonify({"error": "Invalid domain"}), 400

    try:
        source_id = get_source_id(domain_map[domain_type])
        answer = get_chatwithpdf(source_id, query)
        return jsonify({"response": answer})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
        # @core_bp.route("/query", methods=['POST', 'OPTIONS'])
# def query():
#     if request.method == 'OPTIONS':
#         return '', 200

#     return jsonify({"response": "Hello, World!"})



//chat box code with repsonse 
"use client";

import type React from "react";
import { useState, useRef, useEffect } from "react";
import { Send, Bot, User, Sparkles } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";

interface Message {
  id: string;
  content: string;
  role: "user" | "assistant";
  timestamp: Date;
}

type ChatBoxProps = {
  indicator: string;
};

export function ChatBox({ indicator }: ChatBoxProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      content:
        "Hello! I'm your economic data assistant. Ask me anything about German economic indicators.",
      role: "assistant",
      timestamp: new Date(),
    },
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Map indicator to sourceId
  const sourceIds: Record<string, string> = {
    "gender equality": "src_xu8lVC3Qox6kchRnG1cq6",
    labour: "src_gQvco3ftB6bUJ9gQ8u66Y",
    macroeconomy: "src_YCJY5mElz4tfQiwklzt9g",
    health: "src_6KqG7PmDuA8DNejTYQyJa",
    finance: "src_4rs5HOMGVDOErQe10Kafd",
    "subjective wellbeing": "src_y1X9pr5NL2Aer3UI1ydzj",
    "emission trading": "src_ZILm5QI9VzVQUgMRSpE2w",
    transport: "src_617Hb0pwT8lZQiNi0SaCf",
    "refugees & migration": "src_WR0PhkuLfSAcRq6mjQO3k",
  };

  // Get the sourceId for the selected indicator, fallback to macroeconomy if unknown
  const sourceId =
    sourceIds[indicator.toLowerCase()] || sourceIds["macroeconomy"];

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      role: "user",
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    try {
      const response = await fetch("http://localhost:5000/query", {
        method: "POST",

        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          domain_type: indicator.toLowerCase(),
          query: input,
        }),
      });

      const data = await response.json();
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: data.response || "Sorry, I couldn't understand that.",
        role: "assistant",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, assistantMessage]);
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 2).toString(),
        content: "❌ Failed to fetch data. Please try again later.",
        role: "assistant",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="border shadow-sm">
      <CardContent className="p-0">
        <div className="flex flex-col h-[400px]">
          <div
            ref={scrollAreaRef}
            className="flex-1 p-4 overflow-y-auto"
            style={{ height: "320px" }}
          >
            <div className="space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${
                    message.role === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`flex items-start space-x-2 max-w-[80%] ${
                      message.role === "user"
                        ? "flex-row-reverse space-x-reverse"
                        : ""
                    }`}
                  >
                    <div
                      className={`flex-shrink-0 rounded-full p-2 ${
                        message.role === "user" ? "bg-primary" : "bg-muted"
                      }`}
                    >
                      {message.role === "user" ? (
                        <User className="h-4 w-4 text-primary-foreground" />
                      ) : (
                        <Bot className="h-4 w-4 text-muted-foreground" />
                      )}
                    </div>
                    <div
                      className={`rounded-lg px-3 py-2 ${
                        message.role === "user"
                          ? "bg-primary text-primary-foreground"
                          : "bg-muted text-foreground"
                      }`}
                    >
                      <p className="text-sm">{message.content}</p>
                      <p className="text-xs opacity-70 mt-1">
                        {message.timestamp.toLocaleTimeString([], {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="flex items-start space-x-2 max-w-[80%]">
                    <div className="flex-shrink-0 rounded-full p-2 bg-muted">
                      <Bot className="h-4 w-4 text-muted-foreground" />
                    </div>
                    <div className="rounded-lg px-3 py-2 bg-muted text-foreground">
                      <div className="flex items-center space-x-2">
                        <div className="h-2 w-2 rounded-full bg-foreground/30 animate-pulse"></div>
                        <div className="h-2 w-2 rounded-full bg-foreground/30 animate-pulse delay-150"></div>
                        <div className="h-2 w-2 rounded-full bg-foreground/30 animate-pulse delay-300"></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          <div className="border-t p-4 bg-background">
            <form onSubmit={handleSubmit} className="flex space-x-2">
              <div className="relative flex-1">
                <Input
                  ref={inputRef}
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder={`Ask about ${indicator} data...`}
                  className="pr-10"
                  disabled={isLoading}
                />
                <Sparkles className="absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              </div>
              <Button
                type="submit"
                size="icon"
                disabled={isLoading || !input.trim()}
              >
                <Send className="h-4 w-4" />
                <span className="sr-only">Send message</span>
              </Button>
            </form>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


View.py code 

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import uuid
from gtts import gTTS
import requests

app = Flask(__name__, static_url_path='', static_folder='static')
CORS(app, resources={r"/*": {"origins": "*", "methods": ["GET", "POST", "OPTIONS"], "allow_headers": ["Content-Type", "Authorization"]}})

# Create directories for audio files
os.makedirs('static/audio', exist_ok=True)

# ChatWithPDF API Key
CHATWITHPDF_API_KEY = "sec_loUyJX9O4X2dJNHWgyNLjbWIiCr0qAaN"

# PDF Source IDs mapping
PDF_SOURCE_IDS = {
    "gender equality": "src_xu8lVC3Qox6kchRnG1cq6",
    "labour": "src_gQvco3ftB6bUJ9gQ8u66Y",
    "macroeconomy": "src_YCJY5mElz4tfQiwklzt9g",
    "marcoeconomy": "src_YCJY5mElz4tfQiwklzt9g",  # Added alias for typo in frontend
    "health": "src_6KqG7PmDuA8DNejTYQyJa",
    "finance": "src_4rs5HOMGVDOErQe10Kafd",
    "subjective wellbeing": "src_y1X9pr5NL2Aer3UI1ydzj",
    "emission trading": "src_ZILm5QI9VzVQUgMRSpE2w",
    "transport": "src_617Hb0pwT8lZQiNi0SaCf",
    "refugees & migration": "src_WR0PhkuLfSAcRq6mjQO3k"
}

def get_source_id(file_path):
    url = "https://api.chatpdf.com/v1/sources/add-file"
    try:
        with open(file_path, 'rb') as f:
            files = [('file', (file_path, f, 'application/octet-stream'))]
            headers = {
                'x-api-key': CHATWITHPDF_API_KEY
            }

            response = requests.post(url, headers=headers, files=files)

        if response.status_code == 200:
            source_id = response.json()['sourceId']
            print(f"✅ Source ID: {source_id}")
            return source_id
        else:
            print(f"❌ Status: {response.status_code}")
            print("❌ Error:", response.text)
            raise Exception("Failed to get source ID from ChatPDF.")
    except FileNotFoundError:
        raise Exception(f"File not found: {file_path}")

def get_chatwithpdf_by_topic(topic, query):
    topic_lower = topic.strip().lower()
    source_id = PDF_SOURCE_IDS.get(topic_lower)

    if not source_id:
        raise ValueError(f"No source ID found for topic '{topic}'")

    return get_chatwithpdf(source_id, query)

def get_chatwithpdf(source_id, query):
    url = "https://api.chatpdf.com/v1/chats/message"
    headers = {
        'x-api-key': CHATWITHPDF_API_KEY,
        "Content-Type": "application/json"
    }
    body = {
        'sourceId': source_id,
        'messages': [
            {
                'role': 'user',
                'content': query
            }
        ]
    }

    response = requests.post(url, headers=headers, json=body)

    if response.status_code == 200:
        content = response.json().get('content', '')
        print(f"🗨️ Response: {content}")
        return content
    else:
        print(f"❌ Status: {response.status_code}")
        print("❌ Error:", response.text)
        raise Exception("Failed to chat with PDF.")

@app.route("/indicator", methods=["POST"])
def handle_indicator():
    data = request.get_json()
    indicator = data.get("indicator")

    if not indicator:
        return jsonify({"error": "No indicator provided"}), 400

    indicator_map = {
        "gender equality": "gender_equality.pdf",
        "labour": "labour.pdf",
        "marcoeconomy": "marcoeconomy.pdf",
        "health": "health.pdf",
        "finance": "finance.pdf",
        "subjective wellbeing": "subjective_wellbeing.pdf",
        "emission trading": "emission_trading.pdf",
        "transport": "transport.pdf",
        "refugees & migration": "refugees_migration.pdf",
    }

    pdf_name = indicator_map.get(indicator, "unknown.pdf")

    print(f"PDF selected: {pdf_name}")
    return jsonify({"pdf": pdf_name})

@app.route("/search_response", methods=['POST'])
def search_function():
    data = request.get_json()
    
    if not data:
        return jsonify({"error": "Missing JSON body"}), 400

    domain_type = data.get("domain_type", "").strip().lower()
    query = data.get("query")
    print(f"Received domain_type: {domain_type}")

    domain_map = {
        "gender equality": "data/gender_equality.pdf",
        "labour": "data/labour.pdf",
        "marcoeconomy": "data/marcoeconomy.pdf",
        "health": "data/health.pdf",
        "finance": "data/finance.pdf",
        "subjective wellbeing": "data/subjective_wellbeing.pdf",
        "emission trading": "data/emission_trading.pdf",
        "transport": "data/transport.pdf",
        "refugees & migration": "data/refugees_migration.pdf",
    }

    if domain_type not in domain_map:
        print(f"Invalid domain_type: {domain_type}")
        return jsonify({"error": "Invalid domain"}), 400

    try:
        source_id = PDF_SOURCE_IDS.get(domain_type)
        if not source_id:
            source_id = get_source_id(domain_map[domain_type])
        answer = get_chatwithpdf(source_id, query)
        return jsonify({"response": answer})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/query", methods=['POST', 'OPTIONS'])
def query():
    if request.method == 'OPTIONS':
        return '', 200  

    data = request.get_json()
    if not data:
        return jsonify({"error": "Missing JSON body"}), 400

    domain_type = data.get("domain_type", "").strip().lower()
    query = data.get("query")
    print(f"Received domain_type: {domain_type}, query: {query}")

    domain_map = {
        "gender equality": "data/gender_equality.pdf",
        "labour": "data/labour.pdf",
        "marcoeconomy": "data/marcoeconomy.pdf",
        "health": "data/health.pdf",
        "finance": "data/finance.pdf",
        "subjective wellbeing": "data/subjective_wellbeing.pdf",
        "emission trading": "data/emission_trading.pdf",
        "transport": "data/transport.pdf",
        "refugees & migration": "data/refugees_migration.pdf",
    }

    if domain_type not in domain_map:
        print(f"Invalid domain_type: {domain_type}")
        return jsonify({"error": "Invalid domain"}), 400

    try:
        source_id = PDF_SOURCE_IDS.get(domain_type)
        if not source_id:
            source_id = get_source_id(domain_map[domain_type])
        print(f"source_id: {source_id}")
        answer = get_chatwithpdf(source_id, query)
        print(f"Answer: {answer}")
        return jsonify({"response": answer})
    except Exception as e:
        print(f"Error: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/summary', methods=['POST'])
def summary():
    domain_type = request.json['domain_type']
    summary_text = get_summary(domain_type) 
    return jsonify({"summary": summary_text})

def get_summary(domain_type):
    # This is a placeholder function - implement based on your needs
    summary_prompt = f"Provide a concise summary of the key points about {domain_type} in Germany."
    return get_chatwithpdf_by_topic(domain_type, summary_prompt)

@app.route("/generate_podcast", methods=['OPTIONS'])
def generate_podcast_options():
    response = jsonify({'status': 'ok'})
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,POST,OPTIONS')
    return response

@app.route("/generate_podcast", methods=['POST'])
def generate_podcast():
    data = request.get_json()
    
    if not data:
        return jsonify({"error": "Missing JSON body"}), 400
    
    indicator = data.get("indicator", "").strip().lower()
    
    if not indicator or indicator == "all":
        return jsonify({"error": "Valid indicator required"}), 400
    
    try:
        # Generate a summary prompt based on the indicator
        summary_prompt = f"""Create a 2-minute podcast script about {indicator} in Germany. 
        Format it as a professional podcast with an introduction, key points, and conclusion.
        Focus on the most important trends, statistics, and their implications.
        Use conversational language suitable for audio narration.
        Include 3-5 specific data points or statistics."""
        
        # Get summary from ChatWithPDF
        summary = get_chatwithpdf_by_topic(indicator, summary_prompt)
        
        # Generate a unique filename
        filename = f"{uuid.uuid4()}.mp3"
        filepath = f"static/audio/{filename}"
        
        # Convert text to speech
        tts = gTTS(text=summary, lang='en', slow=False)
        tts.save(filepath)
        
        # Return the URL to the audio file
        audio_url = f"http://127.0.0.1:5000/{filepath}"
        
        return jsonify({
            "audio_url": audio_url,
            "transcript": summary
        })
        
    except Exception as e:
        print(f"Error generating podcast: {str(e)}")
        return jsonify({"error": str(e)}), 500

//manage.py
from flask import Flask
from flask_cors import CORS
from src.core.routes.views import core_bp
from src.core.db import db

app = Flask(__name__)
CORS(app)

# ✅ PostgreSQL connection string
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:db123@localhost:5432/HMI'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)  # <-- Initialize the DB

# Register the blueprint
app.register_blueprint(core_bp)

@app.route("/")
def home():
    return "Flask backend is running! with PostgreSQL connection.🚀🚀"

if __name__ == "__main__":
    app.run(debug=True)



    //page.tsx withpout stors "use client";
// You'll need to install recharts: npm install recharts
import {
  ArrowDown,
  ArrowUp,
  TrendingUp,
  Play,
  Pause,
  Volume2,
  Download,
  Loader2,
  FileText,
  X,
  BarChart3,
  MessageSquare,
  Headphones,
} from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { StoryGenerator } from "@/components/story-generator";
import { StoryTemplates } from "@/components/story-template";
import load from "../styles/load.gif";
import { TrendCard } from "@/components/trend-card";
import { ChatBox } from "@/components/chat-box";
import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { D3Visualization } from "@/components/d3-visualization";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [trendData, setTrendData] = useState<string | null>(null);
  const [indicator, setIndicator] = useState("all");
  const [isPodcastGenerating, setIsPodcastGenerating] = useState(false);
  const [podcastAudio, setPodcastAudio] = useState<string | null>(null);
  const [podcastTranscript, setPodcastTranscript] = useState<string | null>(
    null
  );
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [showTranscript, setShowTranscript] = useState(false);
  const audioRef = useRef<HTMLAudioElement | null>(null);

  type Trend = {
    title: string;
    value: string;
    description: string;
    trend: "up" | "down" | "flat";
  };

  const [trendList, setTrendList] = useState<Trend[]>([]);

  const prompts: Record<string, string> = {
    "gender equality": `List the top 3 gender equality indicators from the provided data. Return as a JSON array with \"title\", \"value\", \"description\", and \"trend\" (\"up\", \"down\", or \"flat\"). Respond only with valid JSON.`,
    labour: `Identify the top 3 labor market indicators based on the PDF. Return them as a JSON array with keys: \"title\", \"value\", \"description\", and \"trend\" (\"up\", \"down\", or \"flat\"). Only return the JSON.`,
    marcoeconomy: `From the macroeconomic data, extract the top 3 macroeconomic indicators for Germany. Provide them in JSON array format with keys: \"title\", \"value\", \"description\", and \"trend\" (\"up\", \"down\", or \"flat\"). Don't include markdown formatting.`,
    health: `List the top 3 health indicators for Germany based on the PDF. Present them in a clean JSON array with \"title\", \"value\", \"description\", and \"trend\" (\"up\", \"down\", \"flat\"). Avoid any markdown.`,
    finance: `Based on the financial data, extract the top 3 finance-related indicators. Format them in JSON with \"title\", \"value\", \"description\", and \"trend\" (\"up\", \"down\", or \"flat\"). No extra formatting.`,
    "subjective wellbeing": `Identify the top 3 indicators of subjective wellbeing from the document. Return only a JSON array with \"title\", \"value\", \"description\", and \"trend\" (\"up\", \"down\", or \"flat\").`,
    "emission trading": `List the 3 most important indicators or statistics related to emission trading. Provide a JSON array containing \"title\", \"value\", \"description\", and \"trend\" (\"up\", \"down\", or \"flat\"). JSON only.`,
    transport: `From the transport-related data, extract 3 key transport indicators. Return them as a JSON array with fields: \"title\", \"value\", \"description\", and \"trend\" (\"up\", \"down\", or \"flat\"). Do not wrap in markdown.`,
    "refugees & migration": `List the top 3 current indicators related to refugees and migration. Format as a JSON array with \"title\", \"value\", \"description\", and \"trend\" (\"up\", \"down\", or \"flat\"). Only return valid JSON.`,
  };

  useEffect(() => {
    if (audioRef.current) {
      const audio = audioRef.current;

      const updateTime = () => setCurrentTime(audio.currentTime);
      const handleLoadedMetadata = () => setDuration(audio.duration);
      const handleEnded = () => setIsPlaying(false);

      audio.addEventListener("timeupdate", updateTime);
      audio.addEventListener("loadedmetadata", handleLoadedMetadata);
      audio.addEventListener("ended", handleEnded);

      return () => {
        audio.removeEventListener("timeupdate", updateTime);
        audio.removeEventListener("loadedmetadata", handleLoadedMetadata);
        audio.removeEventListener("ended", handleEnded);
      };
    }
  }, [podcastAudio]);

  const handleIndicatorChange = async (value: string) => {
    setIndicator(value);
    setLoading(true);
    setTrendData(null);
    setTrendList([]);
    setPodcastAudio(null);
    setPodcastTranscript(null);
    setShowTranscript(false);

    try {
      const indicatorRes = await fetch("http://127.0.0.1:5000/indicator", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ indicator: value }),
      });

      const indicatorData = await indicatorRes.json();
      if (indicatorData.error) {
        console.error("Backend error:", indicatorData.error);
        return;
      }

      const query =
        prompts[value] ||
        "List the top 3 economic indicators in JSON format with title, value, description, and trend as 'up', 'down', or 'flat'. Only return the JSON array.";

      const searchRes = await fetch("http://127.0.0.1:5000/search_response", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          domain_type: value,
          query,
        }),
      });

      const searchData = await searchRes.json();
      if (searchData.error) {
        console.error("Search error:", searchData.error);
        return;
      }

      setTrendData(searchData.response);

      try {
        const cleanedResponse = searchData.response
          .replace(/^```json\n/, "")
          .replace(/```$/, "")
          .trim();

        const parsed = JSON.parse(cleanedResponse);

        const extractedTrends = Array.isArray(parsed)
          ? parsed
          : Object.values(parsed).find((val) => Array.isArray(val)) || [];

        setTrendList(extractedTrends);
        console.log("Extracted trends:", extractedTrends);
      } catch (jsonErr) {
        console.error("Failed to parse trend data:", jsonErr);
      }
    } catch (err) {
      console.error("Fetch failed:", err);
    } finally {
      setLoading(false);
    }
  };

  const generatePodcast = async () => {
    if (!indicator || indicator === "all") return;

    setIsPodcastGenerating(true);
    setPodcastAudio(null);
    setPodcastTranscript(null);

    try {
      const response = await fetch("http://127.0.0.1:5000/generate_podcast", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          indicator: indicator,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to generate podcast");
      }

      const data = await response.json();
      setPodcastAudio(data.audio_url);
      setPodcastTranscript(data.transcript);
    } catch (error) {
      console.error("Error generating podcast:", error);
    } finally {
      setIsPodcastGenerating(false);
    }
  };

  const togglePlayPause = () => {
    if (!audioRef.current) return;

    if (isPlaying) {
      audioRef.current.pause();
    } else {
      audioRef.current.play();
    }

    setIsPlaying(!isPlaying);
  };

  const handleSliderChange = (value: number[]) => {
    if (!audioRef.current) return;

    const newTime = value[0];
    audioRef.current.currentTime = newTime;
    setCurrentTime(newTime);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs < 10 ? "0" : ""}${secs}`;
  };

  const toggleTranscript = () => {
    setShowTranscript(!showTranscript);
  };

  const getIndicatorTitle = (ind: string) => {
    if (ind === "all") return "All Indicators";
    return ind.charAt(0).toUpperCase() + ind.slice(1);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-700 text-white">
        <div className="container mx-auto px-4 py-16">
          <div className="max-w-3xl">
            <h1 className="text-4xl md:text-5xl font-bold mb-4">
              German Economic Insights
            </h1>
            <p className="text-xl opacity-90 mb-8">
              Explore key economic indicators and trends across Germany's
              regions through interactive data, AI-powered chat, and audio
              summaries.
            </p>

            <div className="flex flex-col sm:flex-row gap-4">
              <Select
                defaultValue={indicator}
                onValueChange={handleIndicatorChange}
              >
                <SelectTrigger className="w-full sm:w-64 bg-white/10 border-white/20 text-white">
                  <SelectValue placeholder="Select Indicator" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Indicators</SelectItem>
                  <SelectItem value="gender equality">
                    Gender Equality
                  </SelectItem>
                  <SelectItem value="labour">Labour</SelectItem>
                  <SelectItem value="marcoeconomy">MacroEconomy</SelectItem>
                  <SelectItem value="health">Health</SelectItem>
                  <SelectItem value="finance">Finance</SelectItem>
                  <SelectItem value="subjective wellbeing">
                    Subjective WellBeing
                  </SelectItem>
                  <SelectItem value="emission trading">
                    Emission Trading
                  </SelectItem>
                  <SelectItem value="transport">Transport</SelectItem>
                  <SelectItem value="refugees & migration">
                    Refugees And Migration
                  </SelectItem>
                </SelectContent>
              </Select>

              {indicator !== "all" && !isPodcastGenerating && !podcastAudio && (
                <Button
                  onClick={generatePodcast}
                  className="bg-white text-purple-700 hover:bg-white/90"
                >
                  <Headphones className="h-4 w-4 mr-2" />
                  Generate Podcast
                </Button>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        <Tabs defaultValue="trends" className="mb-8">
          <TabsList className="grid w-full grid-cols-2 mb-8">
            <TabsTrigger
              value="trends"
              className="flex items-center justify-center"
            >
              <BarChart3 className="h-4 w-4 mr-2" />
              Data Trends
            </TabsTrigger>
            <TabsTrigger
              value="chat"
              className="flex items-center justify-center"
            >
              <MessageSquare className="h-4 w-4 mr-2" />
              Ask AI Assistant
            </TabsTrigger>
          </TabsList>

          <TabsContent value="trends" className="space-y-8">
            {/* Trends Section */}
            <section>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold tracking-tight text-gray-900">
                  {indicator === "all"
                    ? "Featured Economic Trends"
                    : `${getIndicatorTitle(indicator)} Insights`}
                </h2>
                {indicator !== "all" && (
                  <div className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
                    Selected: {getIndicatorTitle(indicator)}
                  </div>
                )}
              </div>

              {loading ? (
                <div className="p-8 rounded-xl shadow bg-white text-center">
                  <img
                    src={load.src || "/placeholder.svg"}
                    alt="Loading..."
                    className="mx-auto w-20 h-20"
                  />
                  <p className="mt-4 text-gray-600">
                    Analyzing economic data...
                  </p>
                </div>
              ) : trendList.length > 0 ? (
                <div className="grid gap-6 md:grid-cols-3">
                  {trendList.map((trend, index) => (
                    <TrendCard
                      key={index}
                      title={trend.title}
                      value={trend.value}
                      trend={trend.trend === "flat" ? "neutral" : trend.trend}
                      icon={
                        trend.trend === "up" ? (
                          <ArrowUp className="h-4 w-4 text-red-500" />
                        ) : trend.trend === "down" ? (
                          <ArrowDown className="h-4 w-4 text-green-500" />
                        ) : (
                          <TrendingUp className="h-4 w-4 text-gray-500" />
                        )
                      }
                      description={trend.description}
                    />
                  ))}
                </div>
              ) : indicator === "all" ? (
                <div className="grid gap-6 md:grid-cols-3">
                  <TrendCard
                    title="Current Inflation"
                    value="4.2%"
                    trend="up"
                    icon={<ArrowUp className="h-4 w-4 text-red-500" />}
                    description="Increased by 0.3% from previous quarter"
                  />
                  <TrendCard
                    title="Unemployment Rate"
                    value="6.1%"
                    trend="down"
                    icon={<ArrowDown className="h-4 w-4 text-green-500" />}
                    description="Decreased by 0.2% from previous quarter"
                  />
                  <TrendCard
                    title="GDP Growth"
                    value="+0.9%"
                    trend="up"
                    icon={<TrendingUp className="h-4 w-4 text-green-500" />}
                    description="Increased by 0.4% from previous quarter"
                  />
                </div>
              ) : trendData ? (
                <div className="bg-white p-6 rounded-xl shadow border border-gray-100">
                  <p className="text-gray-700 whitespace-pre-wrap">
                    {trendData}
                  </p>
                </div>
              ) : (
                <div className="bg-white p-8 rounded-xl shadow text-center border border-gray-100">
                  <p className="text-gray-600">
                    Select an indicator to view economic trends.
                  </p>
                </div>
              )}
            </section>
          </TabsContent>

          <TabsContent value="chat" className="space-y-8">
            {/* Chat Section */}
            <section>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold tracking-tight text-gray-900">
                  Ask About the Data
                </h2>
                {indicator !== "all" && (
                  <div className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
                    Context: {getIndicatorTitle(indicator)}
                  </div>
                )}
              </div>
              <div className="bg-white rounded-xl shadow border border-gray-100 overflow-hidden">
                <ChatBox indicator={indicator} />
              </div>
            </section>
          </TabsContent>
          <TabsContent value="stories" className="space-y-8">
            {/* Stories Section */}
            <section>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold tracking-tight text-gray-900">
                  Data Stories
                </h2>
                {indicator !== "all" && (
                  <div className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
                    Context: {getIndicatorTitle(indicator)}
                  </div>
                )}
              </div>
              <div className="bg-white rounded-xl shadow border border-gray-100 overflow-hidden">
                <div className="p-6">
                  <StoryTemplates
                    onSelectTemplate={(template) =>
                      console.log("Selected template:", template)
                    }
                  />
                </div>
              </div>
              <div className="bg-white rounded-xl shadow border border-gray-100 overflow-hidden mt-6">
                <div className="p-6">
                  <StoryGenerator indicator={indicator} />
                </div>
              </div>
            </section>
          </TabsContent>
        </Tabs>

        {/* Podcast Section - Now below the chat box */}
        <section className="mt-12 pt-8 border-t border-gray-200">
          <div className="flex justify-between items-center mb-6">
            <div className="flex items-center">
              <Headphones className="h-6 w-6 text-purple-600 mr-3" />
              <h2 className="text-2xl font-bold tracking-tight text-gray-900">
                Audio Insights
              </h2>
            </div>
          </div>

          {isPodcastGenerating ? (
            <div className="bg-white p-8 rounded-xl shadow border border-gray-100 flex flex-col items-center justify-center">
              <Loader2 className="h-10 w-10 animate-spin text-purple-600 mb-4" />
              <p className="text-gray-600">
                Generating audio insights for {getIndicatorTitle(indicator)}...
              </p>
            </div>
          ) : podcastAudio ? (
            <div className="space-y-6">
              <div className="bg-gradient-to-r from-purple-50 via-indigo-50 to-blue-50 p-6 rounded-xl shadow border border-purple-100">
                <audio ref={audioRef} src={podcastAudio} className="hidden" />

                <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
                  <div className="flex items-center">
                    <Button
                      onClick={togglePlayPause}
                      size="icon"
                      variant="ghost"
                      className="h-14 w-14 rounded-full bg-purple-600 text-white hover:bg-purple-700 mr-4 shadow-md"
                    >
                      {isPlaying ? (
                        <Pause className="h-6 w-6" />
                      ) : (
                        <Play className="h-6 w-6 ml-1" />
                      )}
                    </Button>
                    <div>
                      <h3 className="font-medium text-lg text-gray-900">
                        {getIndicatorTitle(indicator)} Audio Summary
                      </h3>
                      <p className="text-sm text-gray-600">
                        Economic insights podcast • {formatTime(duration)}
                      </p>
                    </div>
                  </div>
                  <div className="flex gap-3">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={toggleTranscript}
                      title="View transcript"
                      className="flex items-center gap-1 border-purple-200 text-purple-700 hover:bg-purple-50"
                    >
                      <FileText className="h-4 w-4" />
                      <span>{showTranscript ? "Hide" : "Show"} Transcript</span>
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => window.open(podcastAudio, "_blank")}
                      title="Download podcast"
                      className="flex items-center gap-1 border-purple-200 text-purple-700 hover:bg-purple-50"
                    >
                      <Download className="h-4 w-4" />
                      <span>Download</span>
                    </Button>
                  </div>
                </div>

                <div className="space-y-3">
                  <div className="flex items-center gap-3">
                    <Volume2 className="h-4 w-4 text-purple-600 flex-shrink-0" />
                    <Slider
                      value={[currentTime]}
                      max={duration || 100}
                      step={0.1}
                      onValueChange={handleSliderChange}
                      className="flex-1"
                    />
                  </div>
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>{formatTime(currentTime)}</span>
                    <span>{formatTime(duration)}</span>
                  </div>
                </div>
              </div>

              {showTranscript && podcastTranscript && (
                <Card className="bg-white border border-gray-200">
                  <CardContent className="p-6">
                    <div className="flex justify-between items-center mb-4">
                      <h3 className="font-medium text-gray-900 flex items-center">
                        <FileText className="h-4 w-4 mr-2 text-purple-600" />
                        Transcript
                      </h3>
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => setShowTranscript(false)}
                        className="h-6 w-6 text-gray-500 hover:text-gray-700"
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                    <div className="prose prose-sm max-w-none">
                      <p className="whitespace-pre-line text-gray-700 leading-relaxed">
                        {podcastTranscript}
                      </p>
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
          ) : (
            <div className="bg-white p-8 rounded-xl shadow border border-gray-100 text-center">
              <Volume2 className="h-12 w-12 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                No Audio Available
              </h3>
              <p className="text-gray-600 max-w-md mx-auto mb-6">
                {indicator !== "all"
                  ? "Generate an audio summary to hear insights about the selected economic indicator."
                  : "Select a specific indicator and generate an audio summary to hear insights."}
              </p>
              {indicator !== "all" && (
                <Button
                  onClick={generatePodcast}
                  className="bg-purple-600 hover:bg-purple-700 text-white"
                >
                  <Headphones className="h-4 w-4 mr-2" />
                  Generate Audio Summary
                </Button>
              )}
            </div>
          )}
        </section>
      </div>
      <D3Visualization indicator={indicator} />

      {/* Footer */}

      <footer className="bg-gray-50 border-t border-gray-200 mt-16 py-8">
        <div className="container mx-auto px-4">
          <div className="text-center text-gray-500 text-sm">
            <p>
              © 2025 German Economic Insights. All data is for demonstration
              purposes.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}


//postgresql conection code 
from flask import Flask
from flask_cors import CORS
from src.core.routes.views import core_bp
from src.core.db import db

app = Flask(__name__)
CORS(app)

# ✅ PostgreSQL connection string
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:db123@localhost:5432/HMI'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)  # <-- Initialize the DB

# Register the blueprint
app.register_blueprint(core_bp)

@app.route("/")
def home():
    return "Flask backend is running! with PostgreSQL connection.🚀🚀"

if __name__ == "__main__":
    app.run(debug=True)

// with data base connection with tbale data


from flask import Flask, jsonify
from flask_cors import CORS
from src.core.routes.views import core_bp
from src.core.db import db
from src.util.data_loader import load_all_data
from sqlalchemy import create_engine, text
import click
from typing import Dict, List

app = Flask(__name__)
CORS(app)

# PostgreSQL configuration
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:db123@localhost:5432/HMI'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db.init_app(app)

# Register the blueprint
app.register_blueprint(core_bp)

# Helper function for database queries
def execute_query(query: str, params: Dict = None) -> List[Dict]:
    """Execute SQL query and return results as dictionaries"""
    with db.engine.connect() as connection:
        result = connection.execute(text(query), params or {})
        return [dict(row) for row in result]

@app.route("/")
def home():
    return "Flask backend is running! with PostgreSQL connection.🚀🚀"

# API Endpoints
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    return response


@app.route("/test")
def test():
    return jsonify({"message": "API is working!"})
@app.route("/indicators")
def get_indicators():
    """Get all available indicators"""
    query = "SELECT * FROM indicators;"
    return jsonify(execute_query(query))

@app.route("/observations/<int:indicator_id>")
def get_observations(indicator_id: int):
    """Get observations for a specific indicator"""
    query = """
    SELECT o.*, i.name as indicator_name, i.unit
    FROM observations o
    JOIN indicators i ON o.indicator_id = i.id
    WHERE o.indicator_id = :indicator_id;
    """
    return jsonify(execute_query(query, {'indicator_id': indicator_id}))

@app.route("/documents")
def get_documents():
    """Get all documents"""
    query = "SELECT * FROM documents;"
    return jsonify(execute_query(query))

@app.route("/visual-entities")
def get_visual_entities():
    """Get all visual entities"""
    query = "SELECT * FROM visual_entities;"
    return jsonify(execute_query(query))

# Data loading endpoints
@app.route("/load-data")
def load_data_route():
    engine = create_engine(app.config['SQLALCHEMY_DATABASE_URI'])
    load_all_data(engine)
    return jsonify({"status": "success", "message": "Data loaded into PostgreSQL"})

@app.cli.command("load-data")
def load_data_command():
    """Load CSV data into PostgreSQL from CLI command."""
    engine = create_engine(app.config['SQLALCHEMY_DATABASE_URI'])
    load_all_data(engine)
    click.echo("✅ Data loaded into PostgreSQL!")

if __name__ == "__main__":
    app.run(debug=True)  









    ///
    from flask import Flask
from flask_cors import CORS
from src.core.db import db
from src.core.routes.views import core_bp
from src.core.routes.indicators import indicator_routes
# Import other route files as needed

def create_app():
    app = Flask(__name__)
    CORS(app)
    
    # Configuration
    app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:db123@localhost:5432/HMI'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # Initialize extensions
    db.init_app(app)
    
    # Register all blueprints without prefixes
    app.register_blueprint(core_bp)
    app.register_blueprint(indicator_routes)
    
    @app.route("/")
    def home():
        return "Flask backend is running! with PostgreSQL connection.🚀🚀"
    
    @app.after_request
    def after_request(response):
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
        response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
        return response

    return app

if __name__ == "__main__":
    app = create_app()
    app.run(debug=True)


//code with no filter for explroe page 
"use client";

import { useState, useEffect } from "react";
import {
  Download,
  LineChartIcon,
  BarChartIcon,
  PieChartIcon,
  TrendingUp,
  Database,
  ImageIcon,
  Info,
  AlertCircle,
  Sparkles,
  Activity,
  Target,
  Filter,
  SparkleIcon as Sparkles2,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { DataChart } from "@/components/data-chart";
import { DataTable } from "@/components/data-table";
import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarProvider,
} from "@/components/ui/sidebar";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Progress } from "@/components/ui/progress";
import { StunningFilterPanel } from "@/components/stunning-filter-panel";

interface Indicator {
  id: number;
  name: string;
  unit: string;
  category: string;
  tags: string[] | string;
}

interface VisualEntity {
  id: number;
  document_id: number;
  fig_number: string;
  type: string;
  title: string;
  description: string;
  tags: string[] | string;
  document_title: string;
  doc_id: string;
  domain: string;
  document_year: number;
  observation_count?: number;
}

interface DashboardSummary {
  total_indicators: { count: number };
  total_documents: { count: number };
  total_visual_entities: { count: number };
  total_observations: { count: number };
  latest_year: { year: number };
  domains: Array<{ domain: string; count: number }>;
  categories: Array<{ category: string; count: number }>;
}

const API_BASE_URL = "http://127.0.0.1:5000";
const COUNTRY_FLAGS: Record<string, string> = {
  "United States": "🇺🇸",
  China: "🇨🇳",
  Japan: "🇯🇵",
  Germany: "🇩🇪",
  "United Kingdom": "🇬🇧",
  France: "🇫🇷",
  India: "🇮🇳",
  Italy: "🇮🇹",
  Brazil: "🇧🇷",
  Canada: "🇨🇦",
  Russia: "🇷🇺",
  "South Korea": "🇰🇷",
  Australia: "🇦🇺",
  Spain: "🇪🇸",
  Mexico: "🇲🇽",
  Indonesia: "🇮🇩",
  Netherlands: "🇳🇱",
  "Saudi Arabia": "🇸🇦",
  Turkey: "🇹🇷",
  Taiwan: "🇹🇼",
};

export default function ExplorePage() {
  const [selectedIndicator, setSelectedIndicator] = useState<Indicator | null>(
    null
  );
  const [viewMode, setViewMode] = useState<"chart" | "table">("chart");
  const [chartType, setChartType] = useState<
    "line" | "bar" | "pie" | "area" | "radial"
  >("bar");
  const [effectiveChartType, setEffectiveChartType] = useState(chartType);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [data, setData] = useState<any>(null);
  const [indicators, setIndicators] = useState<Indicator[]>([]);
  const [relatedVisuals, setRelatedVisuals] = useState<VisualEntity[]>([]);
  const [dashboardSummary, setDashboardSummary] =
    useState<DashboardSummary | null>(null);
  const [timeRange, setTimeRange] = useState<[number, number]>([2020, 2024]);
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [activeTab, setActiveTab] = useState("overview");
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [filters, setFilters] = useState({
    countries: [] as string[],
    dateRange: { start: 2020, end: 2024 },
    categories: [] as string[],
  });
  const [showFilters, setShowFilters] = useState(true);

  // Data transformation functions
  const transformDataForChart = (type: string, rawData: any) => {
    if (!rawData) return [];

    console.log(`Transforming data for ${type} chart`, rawData); // Debug log

    switch (type) {
      case "line":
      case "area":
        if (rawData.line_data && rawData.line_data.length > 0) {
          const lineData = Object.entries(rawData.line_data[0]).map(
            ([country, value]) => ({
              country,
              value,
              year: rawData.years?.[0] || 2024,
            })
          );
          console.log("Transformed line data:", lineData); // Debug log
          return lineData;
        }
        return [];

      case "bar":
        if (rawData.bar_data) {
          const barData = rawData.bar_data.flatMap(
            (item: any) =>
              item.data?.map((d: any) => ({
                country: item.country,
                value: d.value,
                year: d.year || rawData.years?.[0] || 2024,
              })) || []
          );
          console.log("Transformed bar data:", barData); // Debug log
          return barData;
        }
        return [];

      case "pie":
      case "radial":
        if (rawData.bar_data) {
          const pieData = rawData.bar_data.map((item: any) => ({
            name: item.country,
            value: item.data?.[0]?.value || 0,
          }));
          console.log("Transformed pie data:", pieData); // Debug log
          return pieData;
        }
        return [];

      default:
        return [];
    }
  };

  const isChartTypeValid = (type: string, rawData: any) => {
    if (!rawData) return false;

    const isValid = (() => {
      switch (type) {
        case "line":
        case "area":
          return rawData.line_data && rawData.line_data.length > 0;
        case "bar":
          return rawData.bar_data && rawData.bar_data.length > 0;
        case "pie":
        case "radial":
          return rawData.bar_data && rawData.bar_data.length > 0;
        default:
          return false;
      }
    })();

    console.log(`Is ${type} chart valid?`, isValid); // Debug log
    return isValid;
  };

  // Fetch initial data
  useEffect(() => {
    const fetchInitialData = async () => {
      try {
        setIsLoading(true);
        setLoadingProgress(10);

        console.log("Checking API health..."); // Debug log
        const healthResponse = await fetch(`${API_BASE_URL}/api/health`);
        if (!healthResponse.ok) throw new Error("API not available");
        setLoadingProgress(30);

        console.log("Fetching indicators and dashboard summary..."); // Debug log
        const [indicatorsResponse, summaryResponse] = await Promise.all([
          fetch(`${API_BASE_URL}/api/indicators`),
          fetch(`${API_BASE_URL}/api/dashboard-summary`),
        ]);
        setLoadingProgress(60);

        if (!indicatorsResponse.ok || !summaryResponse.ok) {
          throw new Error("Failed to fetch initial data");
        }

        const indicatorsResult = await indicatorsResponse.json();
        const summaryResult = await summaryResponse.json();
        setLoadingProgress(80);

        console.log("Indicators API response:", indicatorsResult); // Debug log
        console.log("Dashboard summary API response:", summaryResult); // Debug log

        if (indicatorsResult.status === "success") {
          setIndicators(indicatorsResult.data);
          console.log("Loaded indicators:", indicatorsResult.data); // Debug log
          if (indicatorsResult.data.length > 0) {
            console.log(
              "Setting first indicator as selected:",
              indicatorsResult.data[0]
            ); // Debug log
            setSelectedIndicator(indicatorsResult.data[0]);
          }
        }

        if (summaryResult.status === "success") {
          setDashboardSummary(summaryResult.data);
        }
        setLoadingProgress(100);
      } catch (err) {
        console.error("Initial data fetch error:", err); // Debug log
        setError(err instanceof Error ? err.message : "Failed to load data");
      } finally {
        setIsLoading(false);
        setLoadingProgress(0);
      }
    };

    fetchInitialData();
  }, []);

  // Update effective chart type when data or chart type changes
  useEffect(() => {
    if (!data) return;

    console.log("Checking chart type validity..."); // Debug log
    console.log("Current chart type:", chartType); // Debug log
    console.log("Current data:", data); // Debug log

    // If current chart type isn't valid, find the first valid one
    if (!isChartTypeValid(chartType, data)) {
      console.log(`Chart type ${chartType} is not valid for current data`); // Debug log
      const validTypes = ["bar", "line", "area", "pie", "radial"].filter(
        (type) => isChartTypeValid(type, data)
      );
      console.log("Valid chart types:", validTypes); // Debug log
      if (validTypes.length > 0) {
        console.log(`Setting effective chart type to ${validTypes[0]}`); // Debug log
        setEffectiveChartType(validTypes[0] as typeof chartType);
      }
    } else {
      console.log(`Chart type ${chartType} is valid`); // Debug log
      setEffectiveChartType(chartType);
    }
  }, [data, chartType]);

  // Fetch visualization data when indicator or time range changes
  useEffect(() => {
    const fetchVisualizationData = async () => {
      if (!selectedIndicator) return;

      try {
        setIsLoading(true);
        setError(null);
        setLoadingProgress(20);

        console.log(
          `Fetching data for indicator ${selectedIndicator.id}: ${selectedIndicator.name}`
        ); // Debug log

        // Fetch time series data and related visualizations in parallel
        const [timeSeriesResponse, visualsResponse] = await Promise.all([
          fetch(`${API_BASE_URL}/api/time-series/${selectedIndicator.id}`),
          fetch(
            `${API_BASE_URL}/api/related-visualizations/${selectedIndicator.id}`
          ),
        ]);
        setLoadingProgress(60);

        const timeSeriesResult = await timeSeriesResponse.json();
        const visualsResult = await visualsResponse.json();
        setLoadingProgress(80);

        console.log("Time series API response:", timeSeriesResult); // Debug log
        console.log("Visuals API response:", visualsResult); // Debug log

        if (!timeSeriesResponse.ok) {
          throw new Error(
            timeSeriesResult.message ||
              `HTTP ${timeSeriesResponse.status}: Failed to fetch time series data`
          );
        }

        if (timeSeriesResult.status === "success") {
          console.log("Setting time series data:", timeSeriesResult.data); // Debug log
          setData(timeSeriesResult.data);
        }

        if (visualsResponse.ok && visualsResult.status === "success") {
          console.log("Setting related visuals:", visualsResult.data); // Debug log
          setRelatedVisuals(visualsResult.data);
        }
        setLoadingProgress(100);
      } catch (err) {
        console.error("Visualization data fetch error:", err); // Debug log
        setError(
          err instanceof Error
            ? err.message
            : "Failed to load visualization data"
        );
      } finally {
        setIsLoading(false);
        setLoadingProgress(0);
      }
    };

    fetchVisualizationData();
  }, [selectedIndicator, timeRange]);

  const filteredIndicators =
    selectedCategory === "all"
      ? indicators
      : indicators.filter((ind) => ind.category === selectedCategory);

  console.log("Filtered indicators:", filteredIndicators); // Debug log

  const handleTimeRangeChange = (values: number[]) => {
    console.log("Time range changed to:", values); // Debug log
    setTimeRange([values[0], values[1]]);
  };

  const handleChartTypeChange = (type: typeof chartType) => {
    console.log("Chart type changed to:", type); // Debug log
    setChartType(type);
  };

  const categories = dashboardSummary?.categories || [];
  const uniqueCategories = [
    "all",
    ...new Set(categories.map((c) => c.category)),
  ];

  const formatTags = (tags: string | string[]): string[] => {
    if (typeof tags === "string") {
      try {
        if (tags.startsWith("[") && tags.endsWith("]")) {
          return eval(tags);
        }
        return [tags];
      } catch (e) {
        return [tags];
      }
    }
    return Array.isArray(tags) ? tags : [tags];
  };

  const getDataQualityScore = () => {
    if (!data || !data.raw_data) return 0;
    const totalPossible = data.years?.length * data.countries?.length || 0;
    const actualData = data.raw_data.length;
    const score =
      totalPossible > 0
        ? Math.min(100, Math.round((actualData / totalPossible) * 100))
        : 0;
    console.log("Data quality score:", score); // Debug log
    return score;
  };

  if (error) {
    console.error("Error state rendered:", error); // Debug log
    return (
      <div className="flex items-center justify-center h-screen">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertCircle className="h-5 w-5 text-red-500" />
              Error Loading Data
            </CardTitle>
            <CardDescription>{error}</CardDescription>
          </CardHeader>
          <CardContent>
            <Button onClick={() => window.location.reload()}>Try Again</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  console.log("Current state:", {
    // Debug log
    selectedIndicator,
    viewMode,
    chartType,
    effectiveChartType,
    isLoading,
    data,
    relatedVisuals,
    dashboardSummary,
    timeRange,
    selectedCategory,
    activeTab,
    loadingProgress,
  });

  return (
    <SidebarProvider>
      <div className="flex min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
        <Sidebar className="border-r border-slate-200 backdrop-blur-sm bg-white/95">
          <SidebarHeader className="border-b px-6 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
            <div className="flex items-center gap-2">
              <Sparkles className="h-5 w-5" />
              <h2 className="text-lg font-semibold">Data Explorer</h2>
            </div>
            {dashboardSummary && (
              <div className="grid grid-cols-2 gap-2 mt-3">
                <div className="text-center p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <div className="text-2xl font-bold">
                    {dashboardSummary.total_indicators.count}
                  </div>
                  <div className="text-xs opacity-90">Indicators</div>
                </div>
                <div className="text-center p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <div className="text-2xl font-bold">
                    {dashboardSummary.total_observations.count}
                  </div>
                  <div className="text-xs opacity-90">Data Points</div>
                </div>
              </div>
            )}
          </SidebarHeader>

          <SidebarContent className="bg-white/95 backdrop-blur-sm">
            {loadingProgress > 0 && (
              <div className="px-6 py-2">
                <Progress value={loadingProgress} className="h-2" />
                <p className="text-xs text-muted-foreground mt-1">
                  Loading data...
                </p>
              </div>
            )}

            <SidebarGroup>
              <SidebarGroupLabel>Category Filter</SidebarGroupLabel>
              <SidebarGroupContent>
                <Select
                  value={selectedCategory}
                  onValueChange={(value) => {
                    console.log("Category changed to:", value); // Debug log
                    setSelectedCategory(value);
                  }}
                >
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select category" />
                  </SelectTrigger>
                  <SelectContent>
                    {uniqueCategories.map((category) => (
                      <SelectItem key={category} value={category}>
                        {category === "all" ? "All Categories" : category}
                        {category !== "all" && (
                          <Badge variant="secondary" className="ml-2">
                            {categories.find((c) => c.category === category)
                              ?.count || 0}
                          </Badge>
                        )}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </SidebarGroupContent>
            </SidebarGroup>

            <SidebarGroup>
              <SidebarGroupLabel>
                Indicators ({filteredIndicators.length})
              </SidebarGroupLabel>
              <SidebarGroupContent>
                <SidebarMenu>
                  {filteredIndicators.length > 0 ? (
                    filteredIndicators.map((indicator) => (
                      <SidebarMenuItem key={indicator.id}>
                        <SidebarMenuButton
                          isActive={selectedIndicator?.id === indicator.id}
                          onClick={() => {
                            console.log("Indicator selected:", indicator); // Debug log
                            setSelectedIndicator(indicator);
                          }}
                          className="flex flex-col items-start gap-2 p-3 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 transition-all duration-200"
                        >
                          <div className="font-medium text-sm">
                            {indicator.name}
                          </div>
                          <div className="flex gap-1 flex-wrap">
                            <Badge variant="secondary" className="text-xs">
                              {indicator.category}
                            </Badge>
                            {indicator.unit && (
                              <Badge variant="outline" className="text-xs">
                                {indicator.unit}
                              </Badge>
                            )}
                          </div>
                        </SidebarMenuButton>
                      </SidebarMenuItem>
                    ))
                  ) : (
                    <div className="space-y-2 px-4">
                      <Skeleton className="h-16 w-full" />
                      <Skeleton className="h-16 w-full" />
                      <Skeleton className="h-16 w-full" />
                    </div>
                  )}
                </SidebarMenu>
              </SidebarGroupContent>
            </SidebarGroup>

            <SidebarGroup>
              <SidebarGroupLabel>Time Range</SidebarGroupLabel>
              <SidebarGroupContent className="px-4">
                <div className="mb-4">
                  <p className="text-sm text-muted-foreground mb-2">
                    {timeRange[0]} - {timeRange[1]}
                  </p>
                  <Slider
                    value={timeRange}
                    min={2010}
                    max={2024}
                    step={1}
                    onValueChange={handleTimeRangeChange}
                  />
                </div>
              </SidebarGroupContent>
            </SidebarGroup>

            <SidebarGroup>
              <SidebarGroupLabel>Visualization</SidebarGroupLabel>
              <SidebarGroupContent>
                <div className="grid grid-cols-2 gap-2 px-4 mb-2">
                  <Button
                    variant={viewMode === "chart" ? "default" : "outline"}
                    size="sm"
                    onClick={() => {
                      console.log("View mode changed to chart"); // Debug log
                      setViewMode("chart");
                    }}
                  >
                    Chart
                  </Button>
                  <Button
                    variant={viewMode === "table" ? "default" : "outline"}
                    size="sm"
                    onClick={() => {
                      console.log("View mode changed to table"); // Debug log
                      setViewMode("table");
                    }}
                  >
                    Table
                  </Button>
                </div>

                {viewMode === "chart" && (
                  <div className="grid grid-cols-3 gap-2 px-4 mt-2">
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant={
                              chartType === "line" ? "default" : "outline"
                            }
                            size="sm"
                            onClick={() => handleChartTypeChange("line")}
                            disabled={!isChartTypeValid("line", data)}
                          >
                            <LineChartIcon className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          {!isChartTypeValid("line", data)
                            ? "Not enough time-series data for line chart"
                            : "Switch to line chart"}
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>

                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant={
                              chartType === "bar" ? "default" : "outline"
                            }
                            size="sm"
                            onClick={() => handleChartTypeChange("bar")}
                            disabled={!isChartTypeValid("bar", data)}
                          >
                            <BarChartIcon className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          {!isChartTypeValid("bar", data)
                            ? "No bar chart data available"
                            : "Switch to bar chart"}
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>

                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant={
                              chartType === "pie" ? "default" : "outline"
                            }
                            size="sm"
                            onClick={() => handleChartTypeChange("pie")}
                            disabled={!isChartTypeValid("pie", data)}
                          >
                            <PieChartIcon className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          {!isChartTypeValid("pie", data)
                            ? "Not enough categories for pie chart"
                            : "Switch to pie chart"}
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>

                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant={
                              chartType === "area" ? "default" : "outline"
                            }
                            size="sm"
                            onClick={() => handleChartTypeChange("area")}
                            disabled={!isChartTypeValid("area", data)}
                          >
                            <Activity className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          {!isChartTypeValid("area", data)
                            ? "Not enough time-series data for area chart"
                            : "Switch to area chart"}
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>

                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant={
                              chartType === "radial" ? "default" : "outline"
                            }
                            size="sm"
                            onClick={() => handleChartTypeChange("radial")}
                            disabled={!isChartTypeValid("radial", data)}
                          >
                            <Target className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          {!isChartTypeValid("radial", data)
                            ? "Not enough categories for radial chart"
                            : "Switch to radial chart"}
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                )}
              </SidebarGroupContent>
            </SidebarGroup>
          </SidebarContent>
        </Sidebar>

        <div className="flex-1 p-6">
          <div className="mb-6 flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold tracking-tight bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent">
                Data Explorer
              </h1>
              <p className="text-muted-foreground mt-2">
                Interactive visualization of research indicators and
                observations with stunning charts
              </p>
            </div>

            <div className="flex items-center gap-4">
              <Button
                variant="outline"
                disabled={isLoading || !data}
                className="shadow-lg"
                onClick={() => console.log("Export data clicked")} // Debug log
              >
                <Download className="h-4 w-4 mr-2" />
                Export Data
              </Button>
            </div>
          </div>

          {isLoading ? (
            <div className="space-y-4">
              <Skeleton className="h-8 w-[300px]" />
              <Skeleton className="h-4 w-[200px]" />
              <Skeleton className="h-[500px] w-full rounded-lg" />
            </div>
          ) : selectedIndicator ? (
            <div className="space-y-6">
              <Tabs
                value={activeTab}
                onValueChange={(value) => {
                  console.log("Tab changed to:", value); // Debug log
                  setActiveTab(value);
                }}
              >
                <TabsList className="mb-4 bg-white/80 backdrop-blur-sm shadow-lg">
                  <TabsTrigger value="overview">Overview</TabsTrigger>
                  <TabsTrigger value="visualizations">
                    Related Visualizations
                  </TabsTrigger>
                  <TabsTrigger value="data">Raw Data</TabsTrigger>
                </TabsList>

                <TabsContent value="overview">
                  <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                    <div className="lg:col-span-3">
                      <Card className="shadow-2xl border-0 bg-white/95 backdrop-blur-sm">
                        <CardHeader className="bg-gradient-to-r from-blue-50 via-purple-50 to-indigo-50">
                          <div className="flex justify-between items-start">
                            <div>
                              <CardTitle className="flex items-center gap-2">
                                <TrendingUp className="h-5 w-5 text-blue-600" />
                                {data?.title || selectedIndicator.name}
                              </CardTitle>
                              <CardDescription className="mt-2">
                                {data?.description ||
                                  `${selectedIndicator.category} indicator`}
                                {data?.unit && ` • Unit: ${data.unit}`}
                              </CardDescription>
                            </div>
                            <TooltipProvider>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <Button variant="ghost" size="icon">
                                    <Info className="h-4 w-4" />
                                  </Button>
                                </TooltipTrigger>
                                <TooltipContent>
                                  <div className="max-w-xs">
                                    <p className="font-medium">
                                      Indicator Details
                                    </p>
                                    <p className="text-sm mt-1">
                                      Category: {selectedIndicator.category}
                                    </p>
                                    <p className="text-sm">
                                      Unit: {selectedIndicator.unit || "N/A"}
                                    </p>
                                    {selectedIndicator.tags && (
                                      <div className="mt-1">
                                        <p className="text-sm font-medium">
                                          Tags:
                                        </p>
                                        <div className="flex flex-wrap gap-1 mt-1">
                                          {formatTags(
                                            selectedIndicator.tags
                                          ).map((tag, i) => (
                                            <Badge
                                              key={i}
                                              variant="outline"
                                              className="text-xs"
                                            >
                                              {tag}
                                            </Badge>
                                          ))}
                                        </div>
                                      </div>
                                    )}
                                  </div>
                                </TooltipContent>
                              </Tooltip>
                            </TooltipProvider>
                          </div>
                        </CardHeader>
                        <CardContent className="p-6">
                          {viewMode === "chart" &&
                          isChartTypeValid(effectiveChartType, data) ? (
                            <>
                              <div className="mb-4">
                                <p className="text-sm text-muted-foreground">
                                  Displaying {effectiveChartType} chart with{" "}
                                  {
                                    transformDataForChart(
                                      effectiveChartType,
                                      data
                                    ).length
                                  }{" "}
                                  data points
                                </p>
                              </div>
                              <DataChart
                                type={effectiveChartType}
                                data={transformDataForChart(
                                  effectiveChartType,
                                  data
                                )}
                                title={`${selectedIndicator.name}`}
                                subtitle={
                                  data?.years?.length > 1
                                    ? `${timeRange[0]}-${timeRange[1]}`
                                    : `Year: ${data?.years?.[0] || 2024}`
                                }
                                height={500}
                                unit={selectedIndicator.unit}
                              />
                            </>
                          ) : viewMode === "chart" ? (
                            <div className="flex items-center justify-center h-96">
                              <Alert>
                                <AlertDescription>
                                  {!data
                                    ? "Loading data..."
                                    : `Data not suitable for ${effectiveChartType} chart. Try a different type.`}
                                </AlertDescription>
                              </Alert>
                            </div>
                          ) : viewMode === "table" && data?.raw_data ? (
                            <DataTable
                              data={data.raw_data.map((item: any) => ({
                                Year: item.year,
                                Country: item.country || "All",
                                Value: item.value,
                                Unit: item.unit || "-",
                                Notes: item.notes || "-",
                              }))}
                            />
                          ) : (
                            <div className="flex items-center justify-center h-96">
                              <Alert>
                                <AlertDescription>
                                  No data available for table view.
                                </AlertDescription>
                              </Alert>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </div>

                    <div className="space-y-4">
                      {data?.countries && data.countries.length > 0 && (
                        <Card className="shadow-xl border-0 bg-white/95 backdrop-blur-sm">
                          <CardHeader className="pb-3">
                            <CardTitle className="text-lg">
                              Data Coverage
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-4">
                            <div className="text-center p-3 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg">
                              <div className="text-2xl font-bold text-blue-600">
                                {data.countries.length}
                              </div>
                              <div className="text-sm text-muted-foreground">
                                Countries
                              </div>
                            </div>
                            <div className="text-center p-3 bg-gradient-to-r from-green-50 to-green-100 rounded-lg">
                              <div className="text-2xl font-bold text-green-600">
                                {data.years?.length || 0}
                              </div>
                              <div className="text-sm text-muted-foreground">
                                Years
                              </div>
                            </div>
                            <div className="text-center p-3 bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg">
                              <div className="text-2xl font-bold text-purple-600">
                                {data.raw_data?.length || 0}
                              </div>
                              <div className="text-sm text-muted-foreground">
                                Observations
                              </div>
                            </div>
                            <div className="text-center p-3 bg-gradient-to-r from-orange-50 to-orange-100 rounded-lg">
                              <div className="text-2xl font-bold text-orange-600">
                                {data.years?.length
                                  ? Math.max(...data.years)
                                  : "N/A"}
                              </div>
                              <div className="text-sm text-muted-foreground">
                                Latest Year
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      )}

                      <Card className="shadow-xl border-0 bg-white/95 backdrop-blur-sm">
                        <CardHeader className="pb-3">
                          <CardTitle className="text-lg">
                            Data Quality
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span>Completeness</span>
                              <span>{getDataQualityScore()}%</span>
                            </div>
                            <Progress
                              value={getDataQualityScore()}
                              className="h-3"
                            />
                            {data?.skipped_values &&
                              data.skipped_values.length > 0 && (
                                <div className="mt-2">
                                  <p className="text-xs text-muted-foreground">
                                    Filtered out {data.skipped_values.length}{" "}
                                    non-numeric values
                                  </p>
                                </div>
                              )}
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="visualizations">
                  <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                    {relatedVisuals.length > 0 ? (
                      relatedVisuals.map((visual) => (
                        <Card
                          key={visual.id}
                          className="overflow-hidden shadow-xl border-0 bg-white/95 backdrop-blur-sm hover:shadow-2xl transition-all duration-300 hover:scale-105"
                        >
                          <CardHeader className="pb-2">
                            <div className="flex items-start justify-between">
                              <div>
                                <Badge variant="outline" className="mb-2">
                                  {visual.fig_number || `Figure ${visual.id}`}
                                </Badge>
                                <CardTitle className="text-lg">
                                  {visual.title}
                                </CardTitle>
                              </div>
                              <Badge className="bg-gradient-to-r from-blue-500 to-purple-500 text-white">
                                {visual.type}
                              </Badge>
                            </div>
                          </CardHeader>
                          <CardContent>
                            <div className="h-40 bg-gradient-to-br from-slate-100 via-blue-50 to-purple-100 rounded-lg flex items-center justify-center">
                              <ImageIcon className="h-8 w-8 text-muted-foreground" />
                            </div>
                            {visual.description && (
                              <p className="text-sm text-muted-foreground mt-4 line-clamp-3">
                                {visual.description}
                              </p>
                            )}
                            {visual.observation_count && (
                              <div className="mt-3">
                                <Badge variant="secondary">
                                  {visual.observation_count} data points
                                </Badge>
                              </div>
                            )}
                          </CardContent>
                          <CardFooter className="bg-gradient-to-r from-slate-50 to-blue-50 flex justify-between">
                            <div className="text-sm">
                              <span className="font-medium">Source:</span>{" "}
                              {visual.document_title}
                            </div>
                            <Badge variant="secondary">
                              {visual.document_year}
                            </Badge>
                          </CardFooter>
                        </Card>
                      ))
                    ) : (
                      <div className="col-span-full">
                        <Alert>
                          <AlertDescription>
                            No visualizations found for this indicator.
                          </AlertDescription>
                        </Alert>
                      </div>
                    )}
                  </div>
                </TabsContent>

                <TabsContent value="data">
                  <Card className="shadow-xl border-0 bg-white/95 backdrop-blur-sm">
                    <CardHeader>
                      <CardTitle>Raw Data</CardTitle>
                      <CardDescription>
                        Complete dataset for {selectedIndicator.name}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      {data?.raw_data ? (
                        <DataTable
                          data={data.raw_data.map((item: any) => ({
                            ID: item.id,
                            Year: item.year,
                            Country: item.country || "All",
                            Value: item.value,
                            Unit: item.unit || "-",
                            "Visual Entity": item.visual_title || "-",
                            Document: item.document_title || "-",
                            Notes: item.notes || "-",
                          }))}
                        />
                      ) : (
                        <div className="text-center py-8">
                          <p>No data available</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            </div>
          ) : (
            <Alert className="shadow-xl border-0 bg-white/95 backdrop-blur-sm">
              <Database className="h-4 w-4" />
              <AlertDescription>
                Select an indicator from the sidebar to start exploring the
                data.
              </AlertDescription>
            </Alert>
          )}
        </div>
      </div>
    </SidebarProvider>
  );
}
